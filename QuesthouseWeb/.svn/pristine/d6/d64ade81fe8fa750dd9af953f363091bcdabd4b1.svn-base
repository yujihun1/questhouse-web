using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using QuesthouseWeb.DataContext;
using QuesthouseWeb.Models;
using QuesthouseWeb.Models.ViewModels;

public class ProductController : Controller
{
    private readonly AppDbContext _context;

    public ProductController(AppDbContext context)
    {
        _context = context;
    }

    [HttpGet]
    public async Task<IActionResult> Index(int page = 1, int pageSize = 10)
    {
		if (page < 1 || pageSize < 1)
		{
			return BadRequest("페이지 값이 잘못되었습니다.");
		}

		var totalItems = await _context.Product.CountAsync();

		if (totalItems == 0)
		{
			return View(new ProductListViewModel
			{
				Items = new List<Product>(),
				Page = page,
				PageSize = pageSize,
				TotalItems = 0
			});
		}

		var products = await _context.Product
            .OrderBy(p => p.Id)
            .Skip((page - 1) * pageSize)
            .Take(pageSize)
            .ToListAsync();

		var viewModel = new ProductListViewModel
		{
			Items = products,
			Page = page,
			PageSize = pageSize,
			TotalItems = totalItems
		};

		return View(viewModel);
	}

    public async Task<IActionResult> Detail(int Id)
    {
		if (Id <= 0)
		{
			return BadRequest("Id가 존재하지 않습니다");
		}

		var data = await _context.Product
			.Include(p => p.ProductClass)
			.Include(p => p.Photo)
			.FirstOrDefaultAsync(p => p.Id.Equals(Id));

        if (data == null)
        {
            return NotFound();
        }
        return View(data);
    }

    [HttpGet]
    public async Task<IActionResult> Add()
    {
        // 콤보박스
        var productClasses = await _context.ProductClass.ToListAsync();

        var viewModel = new ProductFormViewModel
        {
            Product = new Product
            {
                Created = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"),
                User_id = 1
            },
            ProductClass = productClasses
        };

        return View(viewModel);
    }

    [HttpPost]
    public async Task<IActionResult> Add(ProductFormViewModel viewModel)
    {
        var model = viewModel.Product;

        _context.Product.Add(model);
        await _context.SaveChangesAsync();

        return RedirectToAction("Index");
    }

    [HttpDelete]
    public async Task<IActionResult> Delete(int id)
    {

        if (id <= 0)
        {
            return BadRequest("Id가 존재하지 않습니다");
        }

        var model = await _context.Product.FindAsync(id);

        if (model == null)
        {
            return NotFound();
        }
        _context.Product.Remove(model);
        await _context.SaveChangesAsync();
       
		return RedirectToAction("Index");
    }

    [HttpPatch]
    public async Task<IActionResult> Patch(int id, [FromBody] ProductPatchDto patchDto)
    {
		var product = await _context.Product.FindAsync(id);
        if (product == null)
        {
            return NotFound();
        }

		if (patchDto.Name != null)
			product.Name = patchDto.Name;

		if (patchDto.Desc != null)
			product.Desc = patchDto.Desc;

        patchDto.Photo_id = product.Photo_id;

        patchDto.Div_id = product.Div_id;

		await _context.SaveChangesAsync();

		return View();
    }
}